<?php

namespace CostoBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CostoRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CostoRepository extends EntityRepository
{
    /**
     * Query para buscar solo un costo por usuario.
     * Devuelve un costo o null.
     *
     * @param DATE    $fechaInicio
     * @param DATE    $fechaFinal
     * @param Usuario $usuario
     *
     * @return array Costo de un elemento
     */
    public function findByFechaAndUsuario($fechaInicio, $fechaFinal, $usuario)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('costo.costo')
            ->from('CostoBundle:Costo', 'costo')
            ->where('costo.fechaInicio >= :fechaInicio')
            ->andWhere('costo.fechaFinal <= :fechaFinal')
            ->andWhere('costo.usuario = :usuario')
            ->setParameter('fechaInicio', $fechaInicio)
            ->setParameter('fechaFinal', $fechaFinal)
            ->setParameter('usuario', $usuario);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * query para buscar todos las entidades costo que coincidan con la fecha
     * ingresada.
     * Puede retornar mÃ¡s de una entdidad.
     *
     * @param DATE $fechaInicio
     * @param DaTe $fechaFinal
     *
     * @return array Costo              [
     */
    public function getQueryCostoPorFecha($fechaInicio, $fechaFinal)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('costo.costo')
            ->from('CostoBundle:Costo', 'costo')
            ->where('costo.fechaInicio >= :fechaInicio')
            ->andWhere('costo.fechaFinal <= :fechaFinal')
            ->setParameter('fechaInicio', $fechaInicio)
            ->setParameter('fechaFinal', $fechaFinal);

        return $qb->getQuery()->getResult();
    }


    public function findCostoPorArea($fechaInicio, $fechaFinal, $area, $cliente)
    {
        //find all users that worked in that area
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('AVG((costo.costo))')
            ->addSelect('area.nombre')
            ->from('UserBundle:Usuario', 'users')
            ->innerJoin('AppBundle:RegistroHoras', 'r', 'with', 'r.ingresadoPor = users.id')
            ->innerJoin('AppBundle:Actividad', 'act', 'with', 'act.id = r.actividad')
            ->innerJoin('AppBundle:Area', 'area', 'with', 'area.id = act.area')
            ->innerJoin('CostoBundle:Costo', 'costo', 'with', 'costo.usuario = users.id')
            ->where('r.cliente = :cliente')
            ->andWhere($qb->expr()->orX(
               $qb->expr()->gte('costo.fechaInicio', ':fechaInicio'),
               $qb->expr()->lte('costo.fechaFinal', ':fechaFinal')
            ))
            ->andWhere('area.id = :area_id')
            ->setParameter('fechaInicio', $fechaInicio)
            ->setParameter('fechaFinal', $fechaFinal)
            ->setParameter('area_id', $area)
            ->setParameter('cliente', $cliente);
        return $qb->getQuery()->getOneOrNullResult();

    }

    public function findCostoPorAreaProyecto($area, $proyecto)
    {
        //find all users that worked in that area
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select('AVG((costo.costo))')
            ->from('UserBundle:Usuario', 'users')
            ->innerJoin('AppBundle:RegistroHoras', 'r', 'with', 'r.ingresadoPor = users.id')
            ->innerJoin('AppBundle:ProyectoPresupuesto', 'proy', 'with', 'proy.id = r.proyectoPresupuesto')
            ->innerJoin('AppBundle:Actividad', 'act', 'with', 'act.id = r.actividad')
            ->innerJoin('AppBundle:Area', 'area', 'with', 'area.id = act.area')
            ->innerJoin('CostoBundle:Costo', 'costo', 'with', 'costo.usuario = users.id')
            ->where('proy.id = :proy')
            ->andWhere('area.id = :area_id')
            ->setParameter('area_id', $area)
            ->setParameter('proy', $proyecto);
        return $qb->getQuery()->getOneOrNullResult();

    }

}
